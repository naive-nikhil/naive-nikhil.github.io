<div class="w-full flex flex-col sm:h-screen justify-between pt-[30px]">
  <div
    class="flex flex-col justify-center items-center gap-4 px-[20px] my-20 sm:my-0"
  >
    <div
      class="flex flex-col-reverse sm:flex-row gap-[20px] text-center justify-center items-center"
    >
      <p class="hidden sm:block w-[36px] h-[2px] bg-[#0C0F03]"></p>
      <p class="text-2xl sm:text-3xl md:text-4xl font-medium">
        Hello, I'm Nikhil
      </p>
      <span
        class="cursor-pointer text-8xl sm:text-4xl animate-wave transition-transform duration-300 origin-bottom hover:scale-250 hover:rotate-30"
        >ðŸ‘‹</span
      >
    </div>
    <p
      class="flex justify-center items-center font-bold w-full sm:w-full max-w-[970px] text-center text-5xl sm:text-5xl md:text-[90px]/23"
    >
      Digital Designer Creative Developer
    </p>
    <p
      class="text-[#545849] font-base text-center w-full sm:w-[600px] text-base sm:text-lg"
    >
      A digital designer and creative developer from Delhi - India passionate
      about creating memorable experiences.
    </p>
    <div
      class="flex flex-col sm:flex-row gap-4 mt-4 text-[#0C0F03] text-sm sm:text-base font-bold"
    >
      <button
        class="bg-[#C8F031] rounded-full border border-[#0C0F03] px-[35px] py-[15px] shadow-[4px_4px_0px_#0C0F03] hover:shadow-[8px_8px_0px_#0C0F03] hover:-translate-y-1"
        >Get In Touch</button
      >
      <button
        class="rounded-full border border-[#0C0F03] px-[35px] py-[15px] shadow-[4px_4px_0px_#0C0F03] hover:shadow-[8px_8px_0px_#0C0F03] hover:-translate-y-1"
        >View Portfolio</button
      >
    </div>
  </div>

  <div
    id="tech-carousel"
    class="bg-[#0C0F03] text-3xl font-bold h-28 overflow-hidden w-full"
  >
    <div id="carousel-container" class="flex h-full items-center">
      <!-- First set of tech icons -->
      <ul
        class="tech-list flex items-center [&_li]:flex [&_li]:items-center [&_li]:gap-4 [&_li]:mx-8 [&_img]:max-w-none invert"
      >
        <li>
          <img class="h-12 w-12" src="/svg/mongodb.svg" />
          <p>MongoDB</p>
        </li>
        <li>
          <img class="h-12 w-12" src="/svg/express.svg" />
          <p>Express.JS</p>
        </li>
        <li>
          <img class="h-12 w-12" src="/svg/react.svg" />
          <p>React.JS</p>
        </li>
        <li>
          <img class="h-12 w-12" src="/svg/nodedotjs.svg" />
          <p>Node.Js</p>
        </li>
        <li>
          <img class="h-12 w-12" src="/svg/html5.svg" />
          <p>HTML5</p>
        </li>
        <li>
          <img class="h-12 w-12" src="/svg/css.svg" />
          <p>CSS</p>
        </li>
        <li>
          <img class="h-12 w-12" src="/svg/javascript.svg" />
          <p>JavaScript</p>
        </li>
        <li>
          <img class="h-12 w-12" src="/svg/astro.svg" />
          <p>Astro</p>
        </li>
        <li>
          <img class="h-12 w-12" src="/svg/git.svg" />
          <p>Git</p>
        </li>
        <li>
          <img class="h-12 w-12" src="/svg/github.svg" />
          <p>Github</p>
        </li>
        <li>
          <img class="h-12 w-12" src="/svg/postman.svg" />
          <p>Postman</p>
        </li>
      </ul>
    </div>
  </div>
</div>

<script>
  // This will run when the component is mounted
  document.addEventListener("DOMContentLoaded", function () {
    const container = document.getElementById("carousel-container");
    const list = document.querySelector(".tech-list");

    // Clone the list and append it to create the infinite effect
    const clone = list?.cloneNode(true);
    container?.appendChild(clone);

    // Get the width of a single list
    const listWidth = list?.offsetWidth;

    // Set animation properties dynamically through CSS variables
    const carousel = document.getElementById("tech-carousel");
    carousel?.style.setProperty("--list-width", `${listWidth}px`);

    // Desired speed - change this value to control speed (pixels per second)
    const pixelsPerSecond = 100;

    // Calculate duration based on width and desired speed
    const duration = listWidth / pixelsPerSecond;
    carousel?.style.setProperty("--scroll-duration", `${duration}s`);

    // Add the animation class after calculations
    container?.classList.add("animate-carousel");

    // Handle resize events to recalculate if needed
    window.addEventListener("resize", function () {
      const updatedWidth = list?.offsetWidth;
      const updatedDuration = updatedWidth / pixelsPerSecond;

      carousel?.style.setProperty("--list-width", `${updatedWidth}px`);
      carousel?.style.setProperty("--scroll-duration", `${updatedDuration}s`);
    });
  });
</script>
